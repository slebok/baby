summary: a composite statement allowing to branch to multiple locations based on several conditions
format: [53:10:3] >> - "EVALUATE" - AnyExpression -2 "ALSO" - AnyExpression - ^12 -2 WhenClause -3 Statement - ^7 - ยก16 - "END" - >< $4 WhenClause >> - "WHEN" - #1 -3 Atomic - #3 \ "THROUGH" - Atomic / &3 -10 - ^16 - #4 - "ALSO" - ยก22 &4 \ -4 >< &1 \2 - "OTHER" -17 /
remarks: <ul>
	* Essentially, the role of the <code>EVALUATE</code> statement is to bring infix expressions into the language, and they are needed to force the software language engineer to deal with parsing ambiguities between <code>A-B</code> and <code>A - B</code> where the first one is a name of a single field and the second one is a binary subtraction of two fields (spaces serve a demonstrative purpose in this example, and are ignored during by the lexical analyser).
	* Note that <code>WHEN</code>-branches consist of statements, not sentences.
	* There can be only one <code>WHEN OTHER</code> clause within each <code>EVALUATE</code>.
	* Unlike COBOL, BabyCobol does not support empty <code>WHEN</code> branches: grouping of multiple conditions is done by the <code>WHEN</code> clause itself, like in 4GLs like <a href="appbuilder.html">AppBuilder</a>, so <code>WHEN 1 WHEN 2 DISPLAY "OK"</code> in COBOL would look like <code>WHEN 1 2 DISPLAY "OK"</code> in BabyCobol.
	* Each branch ends with its last statement, and there is no fall-through or other form of control flow from one branch to another.
	* <a href="nextsentence.html"><code>NEXT SENTENCE</code></a> in the middle of <code>EVALUATE</code> statement works as usual, exiting it and continuing at the next sentence after it.
</ul>
