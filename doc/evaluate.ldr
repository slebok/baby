summary: a composite statement allowing to branch to multiple locations based on several conditions
format: [53:11:3] >> - "EVALUATE" - AnyExpression - #1 -15 &1 \2 - "ALSO" - AnyExpression - ^12 /2 -4 WhenClause -3 Statement - ^7 - ยก16 - "END" - >< $5 WhenClause >> - "WHEN" - #2 -3 Atomic - #3 \ "THROUGH" - Atomic / &3 -10 - ^16 - #4 - "ALSO" - ยก22 &4 \ -4 >< &2 \2 - "OTHER" -17 /
remarks: <ul>
	* Essentially, besides being a form of a branching, the <code>EVALUATE</code> statement brings infix operators into the language in a place where space-separated expressions are allowed.
	* Implementers are forced deal with parsing ambiguities between <code>A-B</code> (single field), <code>A -B</code> (two expressions: one field and one unary expression) and <code>A - B</code> (a binary subtraction of two fields).
	* Spaces in the example above serve a demonstrative purpose, and are ignored in lexical analysis.
	* Note that <code>WHEN</code>-branches consist of statements, not sentences.
	* There can be only one <code>WHEN OTHER</code> clause within each <code>EVALUATE</code>.
	* Unlike COBOL, BabyCobol does not support empty <code>WHEN</code> branches: grouping of multiple conditions is done by the <code>WHEN</code> clause itself, like in 4GLs like <a href="appbuilder.html">AppBuilder</a>, so <code>WHEN 1 WHEN 2 DISPLAY "OK"</code> in COBOL would look like <code>WHEN 1 2 DISPLAY "OK"</code> in BabyCobol.
	* Each branch ends with its last statement, and there is no fall-through or other form of control flow from one branch to another.
	* If <code>EVALUATE</code> has <code>ALSO</code> clauses, then each <code>WHEN</code> need to have that exact number of <code>ALSO</code> clauses, except for <code>WHEN OTHER</code>.
	* <a href="nextsentence.html"><code>NEXT SENTENCE</code></a> in the middle of <code>EVALUATE</code> statement works as usual, exiting it and continuing at the next sentence after it.
</ul>
