summary: structural execution of a sequence of commands
format: [55â‡“] >> - "LOOP" - #0 -44 "END" - >< &0 \2 - #1 - "VARYING" - #2 -8 #3 -9 #4 -8 #5 -8 - ^41 /2 &2 \ Identifier / &3 \ "FROM" - Atomic / &4 \ "TO" - Atomic / &5 \ "BY" - Atomic / &1 \3 "WHILE" - BooleanExpression -25 &1 \4 "UNTIL" - BooleanExpression -25 &1 \5 Statement -32 /5
remarks: <ul><li>the <code>VARYING</code> clause can only refer to a numeric field</li><li>if the <code>VARYING</code> clause is present but the <code>FROM</code> clause is missing, then the initial value is 1</li><li>if the <code>VARYING</code> clause is present but the <code>TO</code> clause is missing, then the final value is the highest possible for the varied field's type</li><li>if the <code>VARYING</code> clause is present but the <code>BY</code> clause is missing, then the looping step is 1</li><li>Essentially, the hard part of this statement stems from the fact that, unlike in modern languages where the loop construct has a clearly defined header and footer, its metainformation can be scattered across the body. This means that while parsing, being inside the loop intrinsically broadens the choice of possible statements by three.</li></ul>
