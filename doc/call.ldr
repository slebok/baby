summary: an instruction to execute another program
format: [35:7:1] >> - "CALL" - FileName - #1 -23 >< &1 \2 "USING" -2 #2 - "BY_REFERENCE" - Identifier -2 ^16 /2 &2 \ "BY_CONTENT" - Atomic -4 &2 \2 "BY_VALUE" - Atomic -4 /2
format2: [36:16:1] >> -2 "CALL" -2 #1 \ FunctionName -2 "OF" / &1 -14 ProgramName -6 $3 - #2 -32 &2 \2 "USING" -2 #3 -9 Atomic - #4 -9 ^23 /2 &3 \ "BY_REFERENCE" - &3 \2 "BY_CONTENT" -2 &3 \3 "BY_VALUE" -2 /3 &4 \ "AS_PRIMITIVE" - &4 \2 "AS_STRUCT" - /2 $4 - #5 -32 >< &5 \ "RETURNING" - #6 -9 Identifier - #7 -8 / &6 \ "BY_REFERENCE" - &6 \2 "BY_CONTENT" -2 &6 \3 "BY_VALUE" -2 /3 &7 \ "AS_PRIMITIVE" - &7 \2 "AS_STRUCT" - /2
remarks: <ul>
	* Executes another program denoted with <code><em>FileName</em></code>, from the start of its <a href="proceduredivision.html"><code>PROCEDURE DIVISION</code></a> until its end or until its <a href="stop.html"><code>STOP</code></a>, whatever comes first, and the continues to execute the current program from the next statement.
	* If the call uses arguments, they should match exactly the arguments of the <a href="proceduredivision.html"><code>PROCEDURE DIVISION</code></a> of the program being called.
	* <code>BY REFERENCE</code> arguments can be accessed and modified by the called program.
	* <code>BY CONTENT</code> arguments be accessed by the called program, but cannot be modified.
	* <code>BY VALUE</code> arguments can be accessed and modified by the called program, but the modification do not propagate back to the caller.
	* The basic format (first diagram above) is enough to implement simple BabyCobol-to-BabyCobol calls; the alternative format (the second diagram) can be used for complex scenarios like BabyCobol-to-C calls from <a href="http://grammarware.net/writes/#Crossover2023">the GPCEâ€™23 paper</a>.
</ul>
